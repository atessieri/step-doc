Overview
========

The **step_producer** is a critical component of the STEP (Secure Transport Events Platform) ecosystem, 
specifically designed for processing and managing Decentralized Environmental Notification Messages (DENM) 
within Intelligent Transportation Systems (ITS) environments. This Redis-based microservice implements 
the DEN (Decentralized Environmental Notification) service for collision prediction and environmental 
hazard notifications.

Purpose
-------

The step_producer serves as an asynchronous service that processes real-time data streams and manages 
the complete lifecycle of DENM messages according to ETSI ITS standards. It transforms collision prediction 
data into standardized DENM messages, ensuring compliance with European telecommunications standards 
for vehicular communication networks.

Key Features
------------

Message Processing
~~~~~~~~~~~~~~~~~~

- **Stream-based Architecture**: Utilizes Redis streams for high-throughput, real-time message 
  processing with guaranteed delivery
- **Collision Detection**: Converts station collision arrays into structured DENM records 
  with proper ordering and unique identification
- **Message Transformation**: Processes collision prediction data from Redis streams and 
  transforms it into standardized DENM messages
- **Lifecycle Management**: Handles creation, updates, and termination of DENM messages 
  with automatic cleanup of expired records

Data Management
~~~~~~~~~~~~~~~

- **Multi-Index Storage**: Maintains sorted lists and hash-based indices for optimal 
  performance in chronological and key-based lookups
- **Automatic Expiration**: Implements time-based cleanup of outdated records based 
  on configurable delay thresholds
- **Sequence Management**: Handles automatic generation and wrap-around of sequence 
  numbers for action IDs
- **Record Persistence**: Provides comprehensive management of DENM records throughout 
  their lifecycle

Configuration and Monitoring
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- **Configuration Management**: Robust configuration validation and schema 
  generation using Pydantic models
- **Logging Framework**: Comprehensive logging with multiple output 
  handlers (stream, file, null)
- **Signal Handling**: Implements graceful shutdown procedures for 
  production deployment scenarios
- **Health Monitoring**: Provides operational status and performance metrics

Core Components
---------------

DEN Service Manager
~~~~~~~~~~~~~~~~~~~

The ``DenServiceManager`` class orchestrates DENM operations and serves as the primary interface for 
managing collision-related environmental notifications. It handles:

- Station collision processing and DENM message generation
- Message termination and cancellation processing
- Periodic cleanup of expired DENM records
- Redis stream integration for message distribution

Key responsibilities:

- Processing station collision arrays into DENM messages
- Managing active DENM records from creation to expiration
- Handling termination requests and message cancellations
- Publishing messages to Redis streams for distribution

DEN Service Data Manager
~~~~~~~~~~~~~~~~~~~~~~~~~

The ``DenServiceDataManager`` class provides comprehensive management of DENM records, implementing:

- **DenmRecord**: Data container for individual DENM messages with metadata
- **Multi-Index Storage**: Efficient record retrieval using sorted lists and hash-based indices
- **Collision Processing**: Conversion of station collision arrays into structured DENM records
- **Automatic Cleanup**: Time-based expiration and cleanup of outdated records

Redis Integration
~~~~~~~~~~~~~~~~~

The Redis integration components (``StepProducerRedisPool`` and ``StepProducerRedisStream``) provide:

- **Connection Management**: Specialized Redis connection pools with configurable limits
- **Stream Operations**: Creation and management of client input/output streams
- **Message Publishing**: Publishing ITS messages to Redis streams
- **Message Reception**: Receiving and validating ITS messages from streams

Configuration System
~~~~~~~~~~~~~~~~~~~~~

The configuration system (``StepProducerConfig``) offers:

- **Hierarchical Configuration**: Multi-level configuration with Redis, logging, and producer settings
- **Type Safety**: Strong typing and validation via Pydantic models
- **Schema Generation**: JSON schema generation for configuration validation
- **Default Configurations**: Pre-configured default instances for quick setup

Logging Infrastructure
~~~~~~~~~~~~~~~~~~~~~~

The logging system (``StepLogger``) provides:

- **Multiple Handlers**: Stream, file, rotating file, and null handlers
- **UTC Formatting**: Standardized UTC timestamp formatting
- **Configurable Levels**: Adjustable logging levels for different environments
- **Structured Logging**: Comprehensive operation logging throughout the service lifecycle

Architecture
------------

Event-Driven Processing
~~~~~~~~~~~~~~~~~~~~~~~

The service follows an event-driven architecture pattern:

1. **Input Processing**: Monitors Redis streams for station collision arrays
2. **Message Generation**: Creates and updates DENM messages based on collision data
3. **Output Streaming**: Publishes processed DENM messages to output streams
4. **Cleanup Operations**: Periodically removes expired or terminated messages

Asynchronous Operations
~~~~~~~~~~~~~~~~~~~~~~~

The architecture utilizes:

- **Async/await**: Non-blocking operations for high-throughput processing
- **Redis Streams**: Message distribution and persistence
- **Task Groups**: Concurrent processing of multiple operations
- **Connection Pooling**: Efficient resource management for Redis connections

Message Flow
~~~~~~~~~~~~

1. **Input Reception**: Station collision arrays received via Redis streams
2. **Data Processing**: Collision data transformed into DENM records
3. **Message Creation**: DENM messages generated with proper metadata
4. **Stream Publishing**: Messages published to output Redis streams
5. **Lifecycle Management**: Automatic cleanup and termination handling

Standards Compliance
--------------------

The step_producer adheres to key ITS standards:

- **ETSI EN 302 637-3**: Decentralized Environmental Notification Messages
- **ETSI TS 102 894-2**: Cooperative Awareness Messages
- **ISO 21217**: Communications Architecture

Dependencies
------------

Core Dependencies
~~~~~~~~~~~~~~~~~

- **step-cloud-schemas**: DENM data structures and message schemas
- **step_redis**: Redis integration and connection management
- **pydantic**: Configuration validation and schema generation
- **sortedcontainers**: Efficient sorted data structures for record management

Development Dependencies
~~~~~~~~~~~~~~~~~~~~~~~~

- **pytest**: Testing framework
- **autoflake**: Code formatting and optimization
- **docformatter**: Documentation formatting
- **beautifulsoup4**: HTML parsing for documentation

Deployment
----------

The step_producer can be deployed as:

- **Standalone Service**: Independent microservice for DENM processing
- **Container Application**: Docker-based deployment for scalability
- **Distributed System**: Part of larger ITS infrastructure with multiple instances

Configuration options support various deployment scenarios:

- **Development**: Local testing with simplified configuration
- **Production**: High-availability deployment with connection pooling
- **Distributed**: Multi-instance deployment with Redis clustering

Usage Patterns
--------------

The service supports multiple usage patterns:

Service Mode
~~~~~~~~~~~~

Run as a continuous service processing real-time streams:

.. code-block:: bash

   python -m step_producer --config production.json

Configuration Generation
~~~~~~~~~~~~~~~~~~~~~~~~

Generate configuration templates and schemas:

.. code-block:: bash

   python -m step_producer --conf_template
   python -m step_producer --conf_schema

Integration Mode
~~~~~~~~~~~~~~~~

Integrate into larger applications as a library component with programmatic 
configuration and custom message processing logic.

Performance Considerations
--------------------------

The step_producer is optimized for:

- **High Throughput**: Efficient processing of large message volumes
- **Low Latency**: Minimal delay between message reception and processing
- **Memory Efficiency**: Automatic cleanup and efficient data structures
- **Scalability**: Horizontal scaling through Redis clustering
- **Reliability**: Graceful error handling and automatic recovery

Testing
-------

The project includes comprehensive tests covering:

- **Unit Tests**: Individual component functionality
- **Integration Tests**: Redis stream operations and message processing
- **Configuration Tests**: Validation of configuration schemas and defaults
- **Performance Tests**: Throughput and latency measurements

Getting Started
---------------

To begin using the STEP Producer, refer to the :doc:`installation<installation>`
section and refer to the :doc:`usage<usage>` section.