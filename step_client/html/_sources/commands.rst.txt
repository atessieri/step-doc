======================
Command Line Interface
======================

Overview
========

The step_client command line interface (CLI) provides a way to interact with the STEP 
(Standardized Transport and Environment Protocol) broker and ITS ETSI messages. It facilitates 
the exchange of messages between the STEP gateway and Redis streams.

The CLI allows users to:

* View the program version
* Generate JSON schema documentation for configuration
* Create configuration templates
* Load and run the client with a specific configuration

Basic Usage
===========

.. code-block:: bash

    step_client [options]

If no options are provided, the program will display the help message.

Options
=======

The following command line options are available:

``-h, --help``
    Display the help message and exit.

``-v, --version``
    Show the program version and exit.

``-s, --conf_schema <schema file>``
    Write the configuration JSON schema to the specified file.

``-t, --conf_template <template file>``
    Write a configuration template to the specified file.

``-c, --config <config file>``
    Load the configuration from the specified file and run the client.

Detailed Command Description
============================

Help Command
------------

To display help information:

.. code-block:: bash

    step_client --help

This will output usage instructions and a list of available options.

Version Command
---------------

To display the program version:

.. code-block:: bash

    step_client --version

This will output the current version of the step_client.

Configuration Schema Generation
-------------------------------

To generate a JSON schema file documenting all configuration options:

.. code-block:: bash

    step_client --conf_schema /path/to/schema_file.json

This command creates a JSON schema file at the specified path. The file describes
all available configuration options, their types, defaults, and constraints. 
The schema can be used for validation or as a reference for creating custom configurations.

Configuration Template Generation
---------------------------------

To generate a configuration template file with default values:

.. code-block:: bash

    step_client --conf_template /path/to/template_file.json

This command creates a JSON configuration file with default values 
for all settings. Users can modify this file as needed to customize their configuration.

Running with Configuration
--------------------------

To run the client with a specific configuration:

.. code-block:: bash

    step_client --config /path/to/config_file.json

This loads the configuration from the specified file and starts the step_client.
The client will connect to the STEP gateway and Redis streams as specified in the configuration.

Configuration File Structure
============================

The configuration file is a JSON document that defines the behavior of the step_client. It includes settings for:

* MQTT client connection
* MQTT protocol options
* Redis client connection
* Redis streams
* Logging configuration
* Client instance name
* Reconnection interval

Here's a simplified overview of the configuration structure:

.. code-block:: json

    {
      "stepConfigVersion": "1",
      "instanceName": "step_client_instance",
      "reconnectInterval": 5.0,
      "mqtt": {
        "client": {
          "host": "broker.example.com",
          "port": 1883,
          "username": "user",
          "password": "pass",
          "sslEnable": false
        },
        "protocol": {
          "qos": 0,
          "topics": {
            "subscribe": ["topic/subscription/#"],
            "publish": "topic/publication"
          }
        }
      },
      "redis": {
        "connection": {
          "host": "localhost",
          "port": 6379,
          "db": 0
        },
        "streams": {
          "maxlen": 1000,
          "streamKeyIts": "its_messages"
        }
      },
      "log": {
        "level": "INFO",
        "file": {
          "enable": true,
          "path": "logs/step_client.log",
          "level": "DEBUG"
        }
      }
    }

For a complete schema with all configuration options, generate a schema file using the ``--conf_schema`` option.

Exit Codes
==========

The program uses the following exit codes:

* ``0`` (OK): Successful termination
* ``1`` (USAGE): Command line usage error
* ``2`` (ERROR): General error during execution
* ``3`` (ABORTED): Operation aborted by user or system

Examples
========

Generate a configuration schema:

.. code-block:: bash

    step_client --conf_schema ./schema.json

Create a configuration template:

.. code-block:: bash

    step_client --conf_template ./template.json

Run with specific configuration:

.. code-block:: bash

    step_client --config ./my_config.json

Generate both schema and template:

.. code-block:: bash

    step_client --conf_schema ./schema.json --conf_template ./template.json

Program Operation
=================

When running with a configuration file, the step_client performs the following operations:

   #. Connects to the Redis server using the provided connection settings
   #. Connects to the STEP gateway using MQTT settings
   #. Subscribes to the specified MQTT topics
   #. Starts two asynchronous tasks:
    
      - One task listens for MQTT ITS ETSI messages from the STEP gateway and publishes them to Redis streams
      - Another task listens for messages from Redis streams and publishes them to the STEP gateway
   
   #. Automatically handles reconnection if connections are lost (using the specified reconnect interval)
   #. Manages graceful shutdown when interrupted

The client will continue running until manually interrupted (e.g., with Ctrl+C) or until a system signal is received.

Advanced Usage
==============

Signal Handling
---------------

The step_client properly handles system signals for graceful shutdown. When a signal is received, 
it cleans up resources and terminates with the appropriate exit code.

Logging
-------

The step_client includes detailed logging capabilities. Log settings can be configured in the configuration file, including:

* Log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)
* Console logging
* File logging with rotation options

You can enable debug logging to troubleshoot connection or message handling issues.