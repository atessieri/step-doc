STEP Config V1 Schema
=====================

The STEP Config Version 1 Schema defines a comprehensive configuration structure 
for the STEP Client. This JSON Schema is automatically generated from Pydantic 
models and provides strong typing, validation rules, and documentation.

Overview
--------

The STEP Configuration is organized hierarchically with the main ``StepConfig`` class 
containing several nested configuration components for different aspects of the system:

  * **Base Configuration**

      * ``templateVersion``: The version of the template (currently "1")
      * ``instanceName``: A unique name for the STEP client instance
      * ``stationId``: Identification number of the station
      * ``latitude``: Geographical latitude of the station (degrees)
      * ``longitude``: Geographical longitude of the station (degrees)
      * ``reconnectInterval``: Time between reconnection attempts (seconds)

  * **MQTT Client Configuration**

      * Connection parameters (host, port)
      * Authentication (username, password)
      * SSL/TLS security settings (certificates, keys)

  * **MQTT Protocol Configuration**

      * Session management (expiry, keepalive, timeout)
      * Message handling (queues, in-flight messages)
      * Topic management (subscriptions, publications)
      * QoS settings

  * **Redis Client Configuration**

      * Connection parameters for message broker integration
      * Security settings

  * **Logging Configuration**

      * Log handlers
      * Log levels
      * Formatting options

Features and Benefits
---------------------

* **Type Validation**: Strong typing and constraints via Pydantic fields
* **Immutable Design**: Configuration is frozen after loading to prevent runtime errors
* **Comprehensive Documentation**: Detailed field descriptions and examples
* **Default Values**: Sensible defaults provided for all configuration options
* **Strict Validation**: Prevents configuration errors before they cause runtime issues

Example
-------

This example is created using JSON Schema **version 1**. For further information, please refer 
to the python classes. 

Example of the configuration schema:

.. literalinclude:: config_templates/step_config_v1_schema.json
  :language: JSON

JSON Schema
-----------

This is JSON Schema **version 1**

.. jsonschema:: config_schemas/step_config_v1_schema.json