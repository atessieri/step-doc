Redis Usage Guide
=================

Introduction
------------

The STEP (Standardized Transport Event Protocol) Library provides robust Redis integration through the ``step_redis`` module. 
This module offers asynchronous Redis interaction capabilities specifically designed for the STEP Framework, including connection 
pooling, SSL/TLS support, and efficient stream management.

This guide explains how to use the Redis components in the STEP Library, with examples based on actual implementation patterns.

Key Components
--------------

The ``step_redis`` module provides three main components:

    #. **StepRedisPoolParams**: A dataclass containing all connection parameters for Redis, 
       including host, port, authentication details, SSL settings, and connection parameters.
    #. **StepRedisPool**: An enhanced blocking connection pool with asynchronous context 
       management, supporting both SSL and non-SSL connections.
    #. **StepRedisStream**: A Redis Streams interface for publish/subscribe patterns, providing 
       methods for creating streams, publishing messages, and consuming messages.

Basic Usage
-----------

General Pattern
~~~~~~~~~~~~~~~

The typical usage pattern involves:

    #. Configure Redis connection parameters using ``StepRedisPoolParams``
    #. Create a connection pool with ``StepRedisPool``
    #. Initialize a stream interface with ``StepRedisStream``
    #. Use asynchronous context managers for proper resource management

.. code-block:: python
    
    import asyncio
    from logging import getLogger
    from step_lib import StepRedisPoolParams, StepRedisPool, StepRedisStream

    async def main():
        logger = getLogger("redis_example")
        
        # 1. Configure connection parameters
        redis_params = StepRedisPoolParams(
            host="redis.example.com",
            port=6379,
            username="user",  # Optional
            password="secret",
            db=0,
            socket_timeout=30,
            socket_connect_timeout=30,
            socket_keep_idle=30,
            socket_keep_alive=30,
            socket_keep_cnt=5,
            ssl_enable=True,
            ssl_client_key_file="/path/to/key.pem",  # Optional
            ssl_client_key_file_password=None,  # Optional
            ssl_client_cert_file="/path/to/cert.pem",  # Optional
            ssl_cert_requested=False,
            ssl_ca_certs_file="/path/to/ca.pem",  # Optional
            health_check_interval=20,
            max_connections=10,
            connection_available_timeout=2,
            protocol=3,
        )
        # 2. Create and use connection pool as context manager
        async with StepRedisPool(params=redis_params, logger=logger) as pool:
            # 3. Create a stream interface
            async with StepRedisStream(pool, logger) as stream:
                # 4. Create a stream and consumer group
                await stream.create_input_stream("data_stream", "processor_group")
                
                # 5. Publish a message
                await stream.publish_message("data_stream", "Hello, Redis!", 1000)
                
                # 6. Receive a message
                message = await stream.receive_message(
                    "data_stream", "processor_group", "consumer1", 5000
                )
                logger.info(f"Received message: {message}")
    if __name__ == "__main__":
        asyncio.run(main())

Advanced Usage: Stream Demo Example
-----------------------------------

The ``step_redis`` module includes a comprehensive demonstration example in the ``stream_demo``
package. This example showcases how to extend the base Redis components for specific use cases,
and provides a complete implementation that can be run as a standalone application.

Stream Demo Components
~~~~~~~~~~~~~~~~~~~~~~

The example consists of the following key components:

    #. **DemoRedisPool**: An extension of ``StepRedisPool`` with pre-configured connection parameters
    #. **RedisStreamInput/Output**: Configuration classes for stream operations
    #. **DemoRedisStream**: A specialized stream implementation for demonstration purposes

Let's look at how these components are implemented:

.. code-block:: python

    # Standard Library Imports
    from dataclasses import dataclass
    from logging import Logger
    # step_redis Package Imports
    from step_redis import StepRedisPool, StepRedisPoolParams, StepRedisStream
    # Custom Redis Pool Implementation
    class DemoRedisPool(StepRedisPool):
        """A Redis connection pool for demonstration purposes."""
        
        def __init__(self, logger: Logger) -> None:
            super().__init__(
                params=StepRedisPoolParams(
                    host="redis-demo.example.com",
                    port=6379,
                    username="default",
                    password="your-password",
                    db=0,
                    socket_timeout=30,
                    socket_connect_timeout=30,
                    socket_keep_idle=30,
                    socket_keep_alive=30,
                    socket_keep_cnt=5,
                    ssl_enable=False,
                    ssl_client_key_file=None,
                    ssl_client_key_file_password=None,
                    ssl_client_cert_file=None,
                    ssl_cert_requested=False,
                    ssl_ca_certs_file=None,
                    health_check_interval=20,
                    max_connections=2,
                    connection_available_timeout=2,
                    protocol=3,
                ),
                logger=logger,
            )

    # Configuration Classes
    @dataclass(frozen=True, kw_only=True, slots=True)
    class RedisStreamOutput:
        """Redis stream output configuration."""
        stream_id: str
        max_length: int
    
    @dataclass(frozen=True, kw_only=True, slots=True)
    class RedisStreamInput:
        """Redis stream input configuration."""
        stream_id: str
        group_id: str
        wait_timeout: int
    
    # Custom Stream Implementation
    class DemoRedisStream(StepRedisStream):
        """A demonstration Redis stream implementation."""
    
        def __init__(
            self,
            logger: Logger,
            pool: DemoRedisPool,
            consumer_name: str,
        ) -> None:
            self._input_config = RedisStreamInput(
                stream_id="demoInputStream",
                group_id="demoGroup",
                wait_timeout=5000,
            )
            self._output_config = RedisStreamOutput(
                stream_id="demoOutputStream",
                max_length=1000,
            )
            self._consumer_name = consumer_name
            super().__init__(pool=pool, logger=logger)
    
        async def create_demo_input_stream(self) -> None:
            """Creates the demo input stream with consumer group."""
            await self.create_input_stream(
                stream_id=self._input_config.stream_id,
                group_id=self._input_config.group_id,
                ttl_seconds=self._input_config.wait_timeout * 6 // 1000,
            )
    
        async def publish_msg(self, message: str) -> None:
            """Publishes a message to the demo output stream."""
            await self.publish_message(
                stream_id=self._output_config.stream_id,
                message=message,
                stream_max_len=self._output_config.max_length,
            )
            # Set TTL for automatic cleanup after 120 seconds
            await self.update_stream_ttl(
                stream_id=self._output_config.stream_id, ttl_seconds=120
            )
    
        async def receive_msg(self) -> str:
            """Receives a message from the demo input stream."""
            msg = await self.receive_message(
                stream_id=self._input_config.stream_id,
                group_id=self._input_config.group_id,
                consumer_name=self._consumer_name,
                block_timeout=self._input_config.wait_timeout,
                ttl_seconds=self._input_config.wait_timeout * 6 // 1000,
            )
            return str(object=msg)

Running the Demo Application
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The demo package also includes a complete runnable application that demonstrates a continuous loop
of publishing and consuming messages. Here's an excerpt from the main implementation:

.. code-block:: python

    async def _main_async(logger: Logger) -> ExitCode:
        """Main async function for the Redis stream demo."""
        
        # Set up exception handling for the event loop
        get_event_loop().set_exception_handler(
            handler=lambda loop, context: _exception_handler(context=context, logger=logger)
        )
        
        # Use async context managers for proper resource management
        async with DemoRedisPool(logger=logger) as redis_pool:
            async with DemoRedisStream(
                logger=logger, pool=redis_pool, consumer_name="demo_1"
            ) as stream:
                logger.info(msg="Stream input connection established")
                
                # Create the input stream and consumer group
                await stream.create_demo_input_stream()
                
                # Continuous publish and receive loop
                while True:
                    try:
                        # Publish a message
                        await stream.publish_msg(
                            message="Hello, this is a message from the Demo!"
                        )
                        
                        # Receive and log the message
                        msg = await stream.receive_msg()
                        logger.info(msg=f"Received message: {msg}")
                    except KeyError as e:
                        logger.warning(msg=f"Error in stream input: {e}, type {type(e)}")
        
        return ExitCode.OK

    # Run the demo
    if __name__ == "__main__":
        main()

You can run the demo application directly with:

.. code-block:: console

    $ python -m stream_demo

The demo showcases best practices for Redis stream usage, including:

    #. Proper signal handling for clean shutdown
    #. Comprehensive error handling
    #. Efficient resource management with async context managers
    #. Stream TTL management for automatic cleanup
    #. Consumer group pattern for reliable message delivery

Best Practices
--------------

    #. **Use Context Managers**: Always use async context managers with Redis pools and streams 
       to ensure proper resource cleanup.
    #. **Configure Timeouts**: Set appropriate socket and connection timeouts based 
       on your network environment.
    #. **Enable SSL for Production**: In production environments, enable SSL/TLS encryption 
       for secure Redis connections.
    #. **Limit Pool Size**: Set reasonable max_connections value to avoid exhausting system resources.
    #. **Handle Errors**: Implement proper error handling for common Redis exceptions, 
       especially for network-related issues.
    #. **Monitor Health**: Use the health_check_interval parameter to ensure connections remain healthy.
    #. **Organize Stream Configs**: Use dedicated configuration classes (like RedisStreamInput/Output)
       to organize stream settings.
    #. **Implement Ping**: Periodically ping the Redis server to verify connectivity.