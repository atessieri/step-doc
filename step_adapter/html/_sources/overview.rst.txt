Overview
========

The **step_adapter** is a critical component of the STEP (Safer Transport for Europe Platform) ecosystem, 
specifically designed for real-time position processing and crash prediction data preparation 
within Intelligent Transportation Systems (ITS) environments. This Redis-based microservice processes 
raw GNSS tracking data into smooth, regularly-sampled position arrays optimized for crash 
prediction algorithms.

Purpose
-------

The **step_adapter** serves as a data preprocessing pipeline that transforms communication messages 
(CAM, CPM, VAM) into position array messages for traffic monitoring and analysis. It processes raw GNSS 
measurements from Redis streams and generates smooth position trajectories using advanced **cubic spline** 
interpolation techniques, ensuring optimal data quality for downstream crash prediction systems.

Key Features
------------

Real-time Data Processing
~~~~~~~~~~~~~~~~~~~~~~~~~

- **Stream-based Architecture**: Utilizes Redis streams for high-throughput, real-time message 
  processing with guaranteed delivery and connection pooling
- **Vehicle Position Processing**: Transforms raw GNSS measurements into smooth position 
  trajectories using **cubic spline** interpolation techniques
- **Multi-Message Support**: Processes CAM (Cooperative Awareness Messages), CPM (Collective 
  Perception Messages), and VAM (Vulnerable Road User Awareness Messages)
- **Actor Dataset Management**: Maintains temporal position tracking for multiple concurrent 
  vehicles with automatic data cleanup

Interpolation and Validation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- **Cubic Spline Interpolation**: Advanced interpolation engine for generating smooth position 
  trajectories from irregular GNSS data with configurable output frequencies
- **Configurable Sampling**: Supports output frequencies from 1Hz to 10Hz with predictable 
  performance characteristics
- **Bounded Memory Usage**: Sliding window approach prevents unbounded memory accumulation 
  with automatic cleanup of outdated records

Configuration and Monitoring
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- **Hierarchical Configuration**: Multi-level configuration with Redis, Logging, and Adapter 
  settings using Pydantic models for type safety and validation
- **Schema Generation**: JSON schema generation for configuration validation and template creation
- **Comprehensive Logging**: Multiple output handlers (stream, file, rotating file) with 
  UTC formatting and configurable levels
- **Signal Handling**: Implements graceful shutdown procedures for production deployment scenarios

Core Components
---------------

Actor Dataset Manager
~~~~~~~~~~~~~~~~~~~~~~

The ``ActorDataset`` class provides comprehensive management of multiple trajectories 
in real-time telemetry applications. It serves as the main orchestration component for 
multi-actor trajectory management and handles:

  - Processing incoming CAM data streams and maintaining individual trajectory datasets
  - Thread-safe concurrent access patterns optimized for high-throughput telemetry
  - Temporal management with automatic cleanup of expired actor data
  - Actor registry and temporal index maintenance for efficient lookup operations

Key responsibilities:
  - Managing actor lifecycle from registration to expiration
  - Coordinating trajectory interpolation for all tracked vehicles  
  - Providing predictable memory usage and performance characteristics
  - Handling concurrent access to shared actor data structures

Point Dataset Manager
~~~~~~~~~~~~~~~~~~~~~

The ``PointDataset`` class provides a high-level interface for managing individual 
position datasets with advanced interpolation capabilities. It implements:

  - **Interpolation Coordination**: Delegation to core PointInterpolation system for 
    cubic spline calculations
  - **Configuration Management**: Processing parameters including path length, output frequency, 
    and timing constraints
  - **Memory Management**: Bounded growth patterns with sliding window data management

Point Interpolation Engine
~~~~~~~~~~~~~~~~~~~~~~~~~~~

The core interpolation system provides:

- **Cubic Spline Interpolation**: Advanced mathematical techniques for smooth trajectory generation
- **Performance Optimization**: O(n + k*log(n)) time complexity for point addition operations
- **Configurable Output**: Support for 1Hz to 10Hz output frequencies with millisecond 
  processing latency
- **Quality Assurance**: Comprehensive validation of input data and interpolation results

Redis Integration
~~~~~~~~~~~~~~~~~

The Redis integration components (``StepAdapterRedisPool`` and ``StepAdapterRedisStream``) provide:

  - **Connection Management**: Specialized Redis connection pools with configurable limits 
    and automatic reconnection capabilities
  - **Stream Operations**: Creation and management of client input/output streams for 
    communication messages
  - **Message Processing**: Receiving and validating CAM, CPM, and VAM messages from streams
  - **Data Distribution**: Publishing position array messages to output streams for 
    crash prediction systems

Configuration System
~~~~~~~~~~~~~~~~~~~~

The configuration system (``StepAdapterConfig``) offers:

  - **Hierarchical Configuration**: Multi-level configuration with Redis, logging, and adapter settings
  - **Type Safety**: Strong typing and validation via Pydantic models with comprehensive validation
  - **Schema Generation**: JSON schema generation for configuration validation and template creation
  - **Default Configurations**: Pre-configured default instances for quick setup and development
  - **Actor Dataset Configuration**: Specialized configuration for timing parameters and 
    trajectory management

Logging Infrastructure
~~~~~~~~~~~~~~~~~~~~~~

The logging system (``StepLogger``) provides:

  - **Multiple Handlers**: Stream, file, rotating file, and null handlers for flexible output options
  - **UTC Formatting**: Standardized UTC timestamp formatting for consistent log entries
  - **Configurable Levels**: Adjustable logging levels for different environments (development, production)
  - **Structured Logging**: Comprehensive operation logging throughout the service lifecycle 
    with detailed processing metrics

Architecture
------------

Event-Driven Processing
~~~~~~~~~~~~~~~~~~~~~~~

The service follows an event-driven architecture pattern:

  #. **Input Processing**: Monitors Redis streams for CAM, CPM, and VAM messages from vehicles
  #. **Position Processing**: Transforms raw GNSS data into smooth position trajectories 
     using cubic spline interpolation
  #. **Actor Management**: Maintains individual datasets for each tracked with 
     temporal data management
  #. **Output Generation**: Publishes processed position array messages to output streams 
     for crash prediction systems
  #. **Cleanup Operations**: Periodically removes expired actor data and manages memory usage

Asynchronous Operations
~~~~~~~~~~~~~~~~~~~~~~~

The architecture utilizes:

  - **Async/await**: Non-blocking operations for high-throughput message processing with 
    concurrent stream consumers
  - **Redis Streams**: Message distribution and persistence with connection pooling
  - **Task Groups**: Concurrent processing of multiple operations including stream reception 
    and data cleanup
  - **Connection Pooling**: Efficient resource management for Redis connections with 
    automatic reconnection

Message Flow
~~~~~~~~~~~~

#. **Message Reception**: CAM, CPM, and VAM messages received via Redis streams from vehicles
#. **Trajectory Processing**: Raw GNSS data transformed into smooth position trajectories 
   using interpolation
#. **Actor Dataset Update**: Position data added to individual datasets with automatic cleanup
#. **Position Array Generation**: Interpolated position arrays published to output Redis streams

Standards Compliance
--------------------

The step_adapter adheres to key ITS standards and supports:

- **ETSI TS 103 900**: Cooperative Awareness Messages (CAM)
- **ETSI TS 103 324**: Collective Perception Messages (CPM) 
- **ETSI TS 103 300-2**: Vulnerable Road User Awareness Messages (VAM)

Dependencies
------------

Core Dependencies
~~~~~~~~~~~~~~~~~

- **step-cloud-schemas**: Message schemas and data structures for CAM, CPM, VAM processing
- **step_redis**: Redis integration and connection management with stream operations
- **pydantic**: Configuration validation and schema generation with type safety
- **scipy**: Cubic spline interpolation algorithms for trajectory smoothing
- **sortedcontainers**: Efficient sorted data structures for temporal data management
- **asyncio**: Asynchronous processing capabilities for concurrent operations

Development Dependencies
~~~~~~~~~~~~~~~~~~~~~~~~

- **pytest**: Testing framework for unit and integration tests
- **autoflake**: Code formatting and optimization tools
- **docformatter**: Documentation formatting for code documentation
- **beautifulsoup4**: HTML parsing for documentation generation

Deployment
----------

The step_adapter can be deployed as:

- **Standalone Service**: Independent microservice for position processing
- **Container Application**: Docker-based deployment for scalability and portability
- **Distributed System**: Part of larger ITS infrastructure with multiple instances 
  for load distribution

Configuration options support various deployment scenarios:

- **Development**: Local testing with simplified configuration and debug logging
- **Production**: High-availability deployment with connection pooling and optimized performance
- **Distributed**: Multi-instance deployment with Redis clustering for high-throughput scenarios

Usage Patterns
--------------

The service supports multiple usage patterns:

Service Mode
~~~~~~~~~~~~

Run as a continuous service processing real-time data streams:

.. code-block:: bash

   python -m step_adapter --instance vehicle_tracker --config production.json

Configuration Generation
~~~~~~~~~~~~~~~~~~~~~~~~

Generate configuration templates and schemas:

.. code-block:: bash

   python -m step_adapter --conf_template
   python -m step_adapter --conf_schema

Integration Mode
~~~~~~~~~~~~~~~~

Integrate into larger applications as a library component with programmatic 
configuration and custom trajectory processing logic for tracking systems.

Testing
-------

The project includes comprehensive tests covering:

- **Unit Tests**: Individual component functionality including interpolation algorithms
- **Integration Tests**: Redis stream operations and message processing workflows  
- **Configuration Tests**: Validation of configuration schemas and default values
- **Performance Tests**: Throughput and latency measurements under various loads
- **Actor Dataset Tests**: Multi-actor trajectory management and cleanup operations

Getting Started
---------------

To begin using the STEP Adapter, refer to the :doc:`installation<installation>`
section and refer to the :doc:`usage<usage>` section.