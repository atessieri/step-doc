===========
Usage Guide
===========

This guide explain how to use the STEP Library to communicate to STEP broker using both asynchronous 
(Coroutine) and synchronous (Non-blocking) approaches.

-------------
Prerequisites
-------------

Before using STEP Library, ensure you have:

- Python 3.11 or higher
- STEP Library installed
- Valid STEP broker credentials

--------------
Basic Concepts
--------------

The main features of the STEP Library include:

    #. Publish ITS Etsi messages to the broker (STEP).
    #. Subscribe to the specific topics in order to receive ITS Etsi messages.

The library supports CAM and DENM messages.

The library provides two main approaches for MQTT communication:

    #. Synchronous (Non-blocking) using ``SyncComManager``
    #. Asynchronous (Coroutine) using ``AsyncComManager``

It is recommended to provide a *cache* folder during the initialization of the library
for performance reason. 
This folder is used to store the ASN.1 information used during the parsing of the messages.
No any part of the message is stored in the cache folder.

The information in the message is encapsulated and passed to the library using:

    #. The class
    #. A dictionary
    #. A JSON string

The communication session is managed with or without the context manager. 

-----------------------
Publish receive Example
-----------------------

The following example explains how to publish a CAM message using the STEP Library.

-----------------
Synchronous Usage
-----------------

The synchronous *Non-blocking* approach uses an transfer thread that manages the communication.
The library create a message FIFO queue to avoid any block due to transmission / reception delay.

Configuration
-------------

The following snippet explains how to create the data-class of parameters.

.. code-block:: python    
    
    def create_sync_com_manager(logger: logging.Logger) -> SyncComManager:
        tls_params = TLSParameters(
            ca_certs=None,
            certfile=None,
            keyfile=None,
            cert_reqs=ssl.VerifyMode.CERT_REQUIRED,
            tls_version=ssl.PROTOCOL_TLSv1_2,
            ciphers=None,
            keyfile_password=None,
        )
        params = SyncComManagerParams(
            instance_name="step_lib_test_1",
            host="step.example.com",
            port=8883,
            username="your_username",
            password="your_password",
            station_id=123
            timeout=10,
            keepalive=30,
            bind_address="",
            bind_port=0,
            clean_start=True,
            queue_type=None,
            max_queued_incoming_messages=60,
            max_queued_outgoing_messages=60,
            max_inflight_messages=60,
            max_concurrent_outgoing_calls=60,
            tls_context=None,
            tls_params=tls_params,
            tls_insecure=False,
            proxy=None,
            socket_options=None,
            session_expiry=0,
            receive_maximum=10,
            maximum_packet_size=4096,
            topic_alias_maximum=0,
            publish_topics_params=[
                PublishTopicParams(
                    message_type=MessageType.CAM,
                    header_topic="v2x/cam/264421_4",
                    geohash_precision=8,
                    qos=0,
                )
            ],
            cache_dir="./.cache",
            logger=logger,
            reconnect_interval=2,
            max_incoming_queue_rooms=60,
            max_outgoing_queue_rooms=60,
        )
        return SyncComManager(params=params)
    
.. note::

    The ``station_id`` field can be None if the library is able to send messages created
    by different stations. If the station_id is None, the library doesn't any
    message otherwise it filters the messages received from the ``station_id`` passed.

Using Context Manager (Recommended)
-----------------------------------

The context manager can manage resource cleanup automatically. So is recommended.
The following snippet of code:
    
    #. Creates a SyncComManager instance (client) managed by Context Manager
    #. Subscribes to the topics
    #. Publishes a CAM message
    #. Processes the received messages in the queue

.. code-block:: python

    # Use context manager for automatic resource cleanup
    with SyncComManager(params) as client:
        
        # Subscribe to the topics
        client.subscribe(
            topics=["v2x/cam/264421_4/g8/+/+/+/+/#", "v2x/denm/264421_4/g8/+/+/+/+/#"],
            max_qos=MqttQoS.QOS_1,
            no_local=True,
        )
        
        # Publish CAM message
        cam_message = CamMessageV1()  # Create your CAM message
        client.publish_its_message(message=cam_message, is_station_mobile=True)
        
        # Process received messages
        for message in client.its_messages_received:
            print(f"Received message: {message}")

.. note::

    The ``no_local`` field can be:

        - True: The client will not receive messages that it has published.
        - False: The client will receive messages that it has published.
    
    If the ``no_local`` field is True, the client isn't able to use shared subscription.

Manual management
-----------------

The following snippet of code:

    #. Creates a SyncComManager instance (client)
    #. Subscribes to the topics
    #. Publishes a CAM message
    #. Processes the received messages in the queue

.. code-block:: python

    client = None
    try:
        client = SyncComManager(params)
        
        # Start the client
        client.start()
        
        # Subscribe to the topics
        client.subscribe(
            topics=["v2x/cam/264421_4/g8/+/+/+/+/#", "v2x/denm/264421_4/g8/+/+/+/+/#"],
            max_qos=MqttQoS.QOS_1,
            no_local=True,
        )

        # Publish CAM message
        cam_message = CamMessageV1()  # Create your CAM message
        client.publish_its_message(message=cam_message, is_station_mobile=True)
        
        # Process received messages
        for message in client.its_messages_received:
            print(f"Received message: {message}")

    finally:
        if client:
            client.stop()
    
.. note::
    
    The ``finally`` is necessary to ensure that the client is stopped and resources 
    are released with or without exception thrown. 

Receive Example
---------------

The function to receive messages is Non-blocking and can be used in a loop without 
timing penalty. The subscription is done during the initialization of the library.
The following example demonstrates how to receive a message using the STEP Library.

.. code-block:: python

    for message in client.its_messages_received:
        logger.info(msg=f"Message received: {message}")

For more detailed information about specific message types and configurations,
refer to the API Reference section :ref:`step_lib_api`.

------------------
Asynchronous Usage
------------------

Asynchronous approach uses the coroutine feature (*asyncio* library in python).
The *asyncio* module provides tools for creating and managing asynchronous task and 
for developing non-blocking network communication.
In the asynchronous approach, only the communication using context manager is supported.

Configuration
-------------

The following snippet explains how to create the data-class of parameters.

.. code-block:: python    
    
    def create_async_com_manager(logger: logging.Logger) -> SyncComManager:
        tls_params = TLSParameters(
            ca_certs=None,
            certfile=None,
            keyfile=None,
            cert_reqs=ssl.VerifyMode.CERT_REQUIRED,
            tls_version=ssl.PROTOCOL_TLSv1_2,
            ciphers=None,
            keyfile_password=None,
        )
        params = AsyncComManagerParams(
            instance_name="step_lib_test_1",
            host="step.example.com",
            port=8883,
            username="your_username",
            password="your_password",
            station_id=123
            timeout=10,
            keepalive=30,
            bind_address="",
            bind_port=0,
            clean_start=True,
            queue_type=None,
            max_queued_incoming_messages=60,
            max_queued_outgoing_messages=60,
            max_inflight_messages=60,
            max_concurrent_outgoing_calls=60,
            tls_context=None,
            tls_params=tls_params,
            tls_insecure=False,
            proxy=None,
            socket_options=None,
            session_expiry=0,
            receive_maximum=10,
            maximum_packet_size=4096,
            topic_alias_maximum=0,
            publish_topics_params=[
                PublishTopicParams(
                    message_type=MessageType.CAM,
                    header_topic="v2x/cam/264421_4",
                    geohash_precision=8,
                    qos=0,
                )
            ],
            cache_dir="./.cache",
            logger=logger,
        )
        return AsyncComManager(params=params)
    
.. note::

    The ``station_id`` field can be None if the library is able to send messages created
    by different stations. If the station_id is None, the library doesn't any
    message otherwise it filters the messages received from the ``station_id`` passed.

Using Context Manager
-----------------------------------

The context manager can manage resource cleanup automatically.
The following snippet of code:
    
    #. Creates a SyncComManager instance (client) managed by Context Manager
    #. Subscribes to the topics
    #. Publishes a CAM message
    #. Processes the received messages in the queue

.. code-block:: python

    # Use context manager for automatic resource cleanup
    async with async_com_manager_create(logger=logger, station_id=None) as client:
        topics = ["v2x/cam/264421_4/g8/+/+/+/+/#", "v2x/denm/264421_4/g8/+/+/+/+/#"]
        sub_results = await client.subscribe(
            topic=[
                (
                    topic,
                    SubscribeOptions(
                        qos=MqttQoS.QOS_1.value,
                        noLocal=False,
                        retainAsPublished=False,
                        retainHandling=SubscribeOptions.RETAIN_DO_NOT_SEND,
                    ),
                )
                for topic in topics
            ]
        )
        for topic, result in zip(
            topics,
            sub_results,
        ):
            if result == MqttQoS.QOS_1.value:
                logger.info(msg=f"Subscribed to {topic}: {result}")
            else:
                logger.error(msg=f"Error subscribing to {topic}: {result}")
        async with TaskGroup() as tg:
            # Receive message task
            receive_message_task = tg.create_task(
                coro=receive_messages(client=client, logger=logger)
            )
            # CAM message as ORM
            await client.publish_its_message(message=create_cam_orm_message(), is_station_mobile=True)
            # DENM message as ORM
            await client.publish_its_message(message=create_denm_orm_message(), is_station_mobile=True)
            # Simulate other operations
            await asyncio_sleep(delay=2)
            # Cancel receive message task
            receive_message_task.cancel()

.. note::

    The ``no_local`` field can be:

        - True: The client will not receive messages that it has published.
        - False: The client will receive messages that it has published.
    
    If the ``no_local`` field is True, the client isn't able to use shared subscription.

.. note::
    
    The ``TaskGroup`` is used to manage the receive tasks and ensure that all tasks are 
    completed before the context manager is closed.

Receive Example
---------------

The function to receive messages is a infinite loop stopped by *coroutine* mechanism
during the message waiting.   
So this loop is executed in a coroutine concurrently with other tasks.
The following example explains how to receive a message using the STEP Library.

.. code-block:: python

    async for message in client.messages:
        orm_message: FacilityMessage = message.payload 
        logger.info(
            msg=f"Message(qos:{message.qos},topic:{message.topic}): {orm_message}",
        )


For more detailed information about specific message types and configurations,
refer to the API Reference section :ref:`step_lib_api`.


----------------
Complete Example
----------------

Following example demonstrates how to use the STEP Library to publish and receive messages using 
both synchronous and asynchronous approaches.

Asynchronous example:

.. literalinclude:: ../examples/publish/async_manager.py
  :language: Python

Synchronous example:

.. literalinclude:: ../examples/publish/sync_manager.py
  :language: Python